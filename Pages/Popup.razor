@page "/popup.html"
@inherits BasePage
@implements IAsyncDisposable
@inject ConfigStorageService configStorageService
@using System.Reactive.Linq
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory

<MudContainer Class="px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="0" Class="mx-auto">
                <MudSwitch @bind-Checked="PluginEnabled" Label="启用通知" Color="Color.Primary" />

            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudSlider @bind-Value="AlarmInterval" Min="1" Max="30" Step="1">通知间隔: @AlarmInterval 分钟</MudSlider>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnTestButtonClicked">检测邮件测试</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnJSTestButtonClicked">检测邮件JS</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {

    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
            "./scripts.js");
        }
    }

    private bool _pluginEnabled;
    public bool PluginEnabled
    {
        get { return _pluginEnabled; }
        set
        {
            _pluginEnabled = value;
            if (_config != null)
            {
                _config.PluginEnabled = value;
            }
        }
    }

    private int _alarmInterval;
    private System.Reactive.Subjects.Subject<int> _alarmIntervalSubject = new System.Reactive.Subjects.Subject<int>();
    public IObservable<int> AlarmIntervalObject;
    public int AlarmInterval
    {
        get { return _alarmInterval; }
        set
        {
            _alarmInterval = value;
            _alarmIntervalSubject.OnNext(value);
        }
    }
    private PluginConfig _config;
    private List<IDisposable> _subscriptions = new List<IDisposable>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // this opens index.html in the extension as a new tab when the background page is loaded

        System.Console.WriteLine("Popup Initialized.");
        _config = await configStorageService.GetConfig();
        _pluginEnabled = _config.PluginEnabled;
        _alarmInterval = _config.AlarmInterval;

        AlarmIntervalObject = _alarmIntervalSubject.AsObservable();
        _subscriptions.Add(AlarmIntervalObject.Throttle(TimeSpan.FromMilliseconds(500)).DistinctUntilChanged().Subscribe((value)
        =>
        {
            _config.AlarmInterval = value;
        }));
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        foreach (var s in _subscriptions)
        {
            s.Dispose();
        }
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    public async void OnTestButtonClicked(MouseEventArgs eventArgs)
    {
        string cmd =
        "{\"model\":\"mail\",\"cmd\":\"list\",\"data\":{\"did\":\"91\",\"flag\":\"\",\"ord\":\"timedesc\",\"page\":1,\"pagecount\":\"1\",\"search\":false,\"queryand\":false}}";
        string reqtime = DateTimeOffset.Now.ToUnixTimeSeconds().ToString();
        
        var httpClient = ClientFactory.CreateClient("WebAPI");

        var resp = await httpClient.PostAsync($"http://mail.hg.cn/rpc?{reqtime}", new FormUrlEncodedContent(new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("anyobj", cmd),
                new KeyValuePair<string, string>("reqtime", reqtime),
                new KeyValuePair<string, string>("randse", reqtime)
                }));
        var bodyStream = await resp.Content.ReadAsStreamAsync();
        var decoded = await System.Text.Json.JsonSerializer.DeserializeAsync<CheckMailResponse>(bodyStream, new System.Text.Json.JsonSerializerOptions(){ PropertyNameCaseInsensitive = true});
        System.Console.WriteLine(decoded);
    }

    public async void OnJSTestButtonClicked(MouseEventArgs eventArgs)
    {
        var ret = await module.InvokeAsync<string>("checkMail");
        System.Console.WriteLine(ret);
    }
}
